;CS61A HW11
;SICP Exercises 3.50, 3.51, 3.52, 3.53, 3.54, 3.55, 3.56, 3.64, 3.66, 3.68


;SICP 3.50
(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
    the-empty-stream
    (cons-stream
      (apply proc (map stream-car argstreams))
      (apply stream-map
             (cons proc (map stream-cdr argstreams))))))

(define (stream-range from to)
  (if (> from to)
    '()
    (cons-stream from (stream-range (+ from 1) to))))

;SICP 3.51

(define (display-line x) (newline) (display x))

(define (stream-ref s n)
  (if (= n 0)
    (stream-car s)
    (stream-ref (stream-cdr s) (- n 1))))

(define (stream-for-each proc s)
  (if (stream-null? s)
    'done
    (begin (proc (stream-car s))
           (stream-for-each proc (stream-cdr s)))))

(define (display-stream s)
  (stream-for-each display-line s))

(define (show x)
  (display-line x)
  x)

;try to guess output: 
;(define x (stream-map show (stream-enumerate-interval 0 10)))
;x ;;actually displays 0x
;(stream-ref x 5)
;0
;1
;2 
;3 
;4
;actually
;1
;2
;3
;4
;55
;(stream-ref x 7)
;0
;1 
;2 
;3 
;4 
;5 
;6
;77
;actually
;6
;77
;calling (display) calls (stream-for-each), which forces the promises in x and only leaves the data behind.
;only the untouched promises return calls to the terminal. This results from the memoized version of delay
;described in SICP

;3.52
(define (stream-filter pred stream)
  (cond ((stream-null? stream) the-empty-stream)
        ((pred (stream-car stream))
         (cons-stream (stream-car stream)
                      (stream-filter
                        pred
                        (stream-cdr stream))))
        (else (stream-filter pred (stream-cdr stream)))))

;3.53: stream generated by (define s (cons-stream 1 (stream-map + s s))) becomes 1, 2, 4, 8, 16, 32, 64, 128 when forced

;3.54
(define (add-streams s1 s2)
  (stream-map + s1 s2))

(define (mul-streams s1 s2)
  (stream-map * s1 s2))

(define ones (cons-stream 1 ones))
(define integers (cons-stream 1 (add-streams ones integers)))

(define factorials
          (cons-stream 1 (mul-streams integers factorials)))

;3.55
(define (partial-sum s)
  (cons-stream (stream-car s) (add-streams (partial-sum s) (stream-cdr s))))


;3.56
(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor))
              stream))

(define (merge s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
          (let ((s1car (stream-car s1))
                (s2car (stream-car s2)))
            (cond ((< s1car s2car)
                   (cons-stream
                     s1car
                     (merge (stream-cdr s1) s2)))
                  ((> s1car s2car)
                   (cons-stream
                     s2car
                     (merge s1 (stream-cdr s2))))
                  (else
                    (cons-stream
                      s1car
                      (merge (stream-cdr s1)
                             (stream-cdr s2)))))))))

(define S (cons-stream 1 (merge (scale-stream S 2) (merge (scale-stream S 3) (scale-stream S 5)))))


;3.64
(define (average a b)
  (/ (+ a b) 2))
(define (sqrt-improve guess x)
  (average guess (/ x guess)))

(define (sqrt-stream x)
  (define guesses
    (cons-stream
      1.0
      (stream-map (lambda (guess) (sqrt-improve guess x)) 
                  guesses)))
  guesses)

(define (stream-limit S tolerance)
  (if (< (abs (- (stream-car S) (stream-car (stream-cdr S)))) tolerance)
    (stream-car (stream-cdr S))
    (stream-limit (stream-cdr S) tolerance)))
;tested with stream of root 2 guesses

;3.66
(define (stream-append s1 s2)
  (if (stream-null? s1)
    s2
    (cons-stream (stream-car s1)
                 (stream-append (stream-cdr s1) s2))))

(define (interleave s1 s2)
  (if (stream-null? s1)
    s2
    (cons-stream (stream-car s1)
                 (interleave s2 (stream-cdr s1)))))

(define (pairs s t)
  (cons-stream
    (list (stream-car s) (stream-car t))
    (interleave
      (stream-map (lambda (x) (list (stream-car s) x))
                  (stream-cdr t))
      (pairs (stream-cdr s) (stream-cdr t)))))

(define (newpairs s t)
  (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                t)
    (pairs (stream-cdr s) (stream-cdr t))))

;it looks like the pairs procedure interleaves the first row first, then fills in the lower rows.
;to reach pair n x n, the pairs procedure looks to generate n^2 pairs before reaching the nxn pair

;3.68
;I believe Louis' newpairs procedure is incorrect, because the pairs recursion call will be executed immediately,
;and not delayed, as it is nested in the cons-stream of the original pairs procedure.

;CS61A HW11 Fract-stream implementaion
(define (fract-stream a b) ;take two non-negative integers
  (let ((rem (remainder a b)))
    (if (= rem a)
      (cons-stream 0 (fract-stream (* a 10) b))
      (cons-stream (/ (- a rem) b) (fract-stream (* rem 10) b)))))

(define (approximation stream digits)
  (if (< digits 1)
    '()
    (cons (stream-car stream) (approximation (stream-cdr stream) (- digits 1)))))

