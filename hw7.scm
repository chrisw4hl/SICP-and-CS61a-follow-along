(define-class (random-generator base)
    (instance-vars (counter 0))
    (method (number)
        (set! counter (+ 1 counter))
        (random base))
    (method (count)
        counter))

(define-class (coke-machine capacity price)
    (instance-vars (inventory 0)(bank 0))
    (method (fill filler)
            (if (> (+ inventory filler) capacity)
                (set! inventory capacity)
                (set! inventory (+ inventory filler))))
    (method (deposit coins)
            (set! bank (+ bank coins))
            (display "Now there's ")
            (display bank)
            (display " cents in there.\n"))
    (method (coke)
            (if (< bank price)
                (display "Not enough money\n")
                (if (> inventory 0)
                    (begin
                      (set! inventory (- inventory 1))
                      (set! bank (- bank price))
                      (display bank)
                      (display "\n"))
                    (display "Machine Empty\n")))))

(define ordered-deck '(AH 2H 3H 4H 5H 6H 7H 8H 9H JH QH KH AS 2S 3S 4S 5S 6S 7S 8S 9S JS QS KS AD 2D 3D 4D 5D 6D 7D 8D 9D JD QD KD AC 2C 3C 4C 5C 6C 7C 8C 9C JC QC KC))

(define (shuffle deck)
  (if (null? deck)
    '()
    (let ((card (nth (random (length deck)) deck)))
      (cons card (shuffle (remove card deck))))))

(define-class (deck-obj deck)
    (method (deal)
            (if (null? deck)
                '()
                (begin
                  (display (car deck))
                  (display "\n")
                  (set! deck (cdr deck)))))
    (method (empty?)
            (if (null? deck)
                #t
                #f)))

(define-class (miss-manners obj)
    (method (please act)
            (ask obj act)))
